package com.litingzhe.justandroid.netdb.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.litingzhe.justandroid.netdb.db.model.BoxCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX_CODE".
*/
public class BoxCodeDao extends AbstractDao<BoxCode, Long> {

    public static final String TABLENAME = "BOX_CODE";

    /**
     * Properties of entity BoxCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BoxId = new Property(0, Long.class, "boxId", true, "_id");
        public final static Property BoxCode = new Property(1, String.class, "boxCode", false, "BOX_CODE");
        public final static Property IsUpload = new Property(2, int.class, "isUpload", false, "IS_UPLOAD");
        public final static Property LandId = new Property(3, String.class, "landId", false, "LAND_ID");
        public final static Property CreateDate = new Property(4, java.util.Date.class, "createDate", false, "CREATE_DATE");
    }


    public BoxCodeDao(DaoConfig config) {
        super(config);
    }
    
    public BoxCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX_CODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: boxId
                "\"BOX_CODE\" TEXT," + // 1: boxCode
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 2: isUpload
                "\"LAND_ID\" TEXT," + // 3: landId
                "\"CREATE_DATE\" INTEGER);"); // 4: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BoxCode entity) {
        stmt.clearBindings();
 
        Long boxId = entity.getBoxId();
        if (boxId != null) {
            stmt.bindLong(1, boxId);
        }
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(2, boxCode);
        }
        stmt.bindLong(3, entity.getIsUpload());
 
        String landId = entity.getLandId();
        if (landId != null) {
            stmt.bindString(4, landId);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BoxCode entity) {
        stmt.clearBindings();
 
        Long boxId = entity.getBoxId();
        if (boxId != null) {
            stmt.bindLong(1, boxId);
        }
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(2, boxCode);
        }
        stmt.bindLong(3, entity.getIsUpload());
 
        String landId = entity.getLandId();
        if (landId != null) {
            stmt.bindString(4, landId);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BoxCode readEntity(Cursor cursor, int offset) {
        BoxCode entity = new BoxCode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // boxId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boxCode
            cursor.getInt(offset + 2), // isUpload
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // landId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BoxCode entity, int offset) {
        entity.setBoxId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBoxCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsUpload(cursor.getInt(offset + 2));
        entity.setLandId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BoxCode entity, long rowId) {
        entity.setBoxId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BoxCode entity) {
        if(entity != null) {
            return entity.getBoxId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BoxCode entity) {
        return entity.getBoxId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
