package com.litingzhe.justandroid.netdb.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.litingzhe.justandroid.netdb.db.model.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteId = new Property(0, Long.class, "noteId", true, "_id");
        public final static Property NoteTitle = new Property(1, String.class, "noteTitle", false, "NOTE_TITLE");
        public final static Property NoteContent = new Property(2, String.class, "noteContent", false, "NOTE_CONTENT");
        public final static Property CreatDate = new Property(3, java.util.Date.class, "creatDate", false, "CREAT_DATE");
        public final static Property FavFlag = new Property(4, int.class, "favFlag", false, "FAV_FLAG");
    }


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: noteId
                "\"NOTE_TITLE\" TEXT," + // 1: noteTitle
                "\"NOTE_CONTENT\" TEXT," + // 2: noteContent
                "\"CREAT_DATE\" INTEGER," + // 3: creatDate
                "\"FAV_FLAG\" INTEGER NOT NULL );"); // 4: favFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindLong(1, noteId);
        }
 
        String noteTitle = entity.getNoteTitle();
        if (noteTitle != null) {
            stmt.bindString(2, noteTitle);
        }
 
        String noteContent = entity.getNoteContent();
        if (noteContent != null) {
            stmt.bindString(3, noteContent);
        }
 
        java.util.Date creatDate = entity.getCreatDate();
        if (creatDate != null) {
            stmt.bindLong(4, creatDate.getTime());
        }
        stmt.bindLong(5, entity.getFavFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindLong(1, noteId);
        }
 
        String noteTitle = entity.getNoteTitle();
        if (noteTitle != null) {
            stmt.bindString(2, noteTitle);
        }
 
        String noteContent = entity.getNoteContent();
        if (noteContent != null) {
            stmt.bindString(3, noteContent);
        }
 
        java.util.Date creatDate = entity.getCreatDate();
        if (creatDate != null) {
            stmt.bindLong(4, creatDate.getTime());
        }
        stmt.bindLong(5, entity.getFavFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // noteId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // noteContent
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // creatDate
            cursor.getInt(offset + 4) // favFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setNoteId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoteTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoteContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setFavFlag(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setNoteId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getNoteId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getNoteId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
